<?xml version="1.0"?>
<implementation>
  <settings>
    <protocol>cr</protocol>
  </settings>
  <functions>
--[[  
Read the status of a UPS via a UPS server attached to a NAS.

Version 2.0 6 Jan 2017 by Rene Boer

This is tested with an APC UPS attached to a Synology NAS, but should work with many UPS servers as long as it does not expect an SSL connection.

The plugin is availbel in the Vera App Market and ALTUI App Store.

The device is a default door/windows sensor so it will behave as such. Extra variables will be set like Battery level, Watts, 
and all variables read from the UPS, just have a look.

The only configuration required is to set the IP address for the UPS server. 
	
Some more background information
	GitHub repository 	https://github.com/reneboer/vera-UPSSensor
	variables possible 	http://networkupstools.org/docs/user-manual.chunked/apcs01.html
	status details APC 	http://www.mathstat.dal.ca/~selinger/ups/backups.html
]]	
	local socketLib = require ("socket")
    local SIDS = { 
		PLG		= "urn:rboer-com:serviceId:UpsSensor",
		ALTUI	= "urn:upnp-org:serviceId:altui1",
		HA_DEV	= "urn:micasaverde-com:serviceId:HaDevice1",
		ZW_DEV	= "urn:micasaverde-com:serviceId:ZWaveDevice1",
		SEC		= "urn:micasaverde-com:serviceId:SecuritySensor1",
		EM_PWR	= "urn:micasaverde-com:serviceId:EnergyMetering1"
	}
    local DATA = {
		Disabled 	= false,
		DebugMode 	= true,
		Device 		= nil,
		ip 			= nil,
		port 		= 3493,
		Version		= "2.0",
		Description	= "UPS Sensor"
	}	
	-- Status codes in ups.status field
	local UPSSTATUS = {
		["OFF"]		= { msg = "Off", alarm = false },
		["OL"]		= { msg = "On Line", alarm = false },
		["OB"]		= { msg = "On Battery", alarm = true },
		["LB"]		= { msg = "Low Battery", alarm = true },
		["RB"]		= { msg = "Replace Battery", alarm = true },
		["OVER"]	= { msg = "Overload", alarm = true },
		["TRIM"]	= { msg = "Voltage Trim", alarm = false },
		["BOOST"]	= { msg = "Voltage Boost", alarm = false },
		["CAL"]		= { msg = "Calibration", alarm = false },
		["BYPASS"]	= { msg = "Bypass", alarm = false },
		["CHRG"]	= { msg = "Charging", alarm = false },
		["DISCHRG"]	= { msg = "Discharging", alarm = false }
	}

    function log(text, lev)
		local lev = (lev or 10)
        luup.log(DATA.Description .. ": "..text, lev)
    end

    function debug(text)
        if (DATA.DebugMode == true) then
            log(text)
        end
    end
	local function varGet(name, service, device)
		local value = luup.variable_get(service or SIDS.PLG, name, tonumber(device or DATA.Device))
		return (value or '')
	end
	-- Update variable when value is different than current.
	local function varSet(name, value, service, device)
		local service = service or SIDS.PLG
		local device = tonumber(device or DATA.Device)
		local old = varGet(name, service, device)
		if (tostring(value) ~= tostring(old)) then 
			luup.variable_set(service, name, value, device)
		end
	end
	--get device Variables, creating with default value if non-existent
	local function defVar(name, default, service, device)
		local service = service or SIDS.PLG
		local device = tonumber(device or DATA.Device)
		local value = luup.variable_get(service, name, device) 
		if (not value) then
			value = default	or ''							-- use default value or blank
			luup.variable_set(service, name, value, device)	-- create missing variable with default value
		end
		return value
	end
	local function round(num, idp)
		local mult = 10^(idp or 0)
		return math.floor(num * mult + 0.5) / mult
	end
	-- Analyse ups.status
	local function CheckStatus(status)
		local sts = nil
		local alarm = false
		for s in status:gmatch("%w+") do
			if sts then 
				sts = sts .. "," .. UPSSTATUS[s].msg
			else     
				sts = UPSSTATUS[s].msg
			end     
			alarm = alarm or UPSSTATUS[s].alarm
		end
		return alarm, sts
	end	
	-- send the LIST VAR ,upsname. command to the UPS server and process the response.
	local function UPSCapture()
		local data = ""
		local res = false
		local upsName = varGet("UPSName")
		if upsName == "" then return false end
		local sock = socketLib.connect(DATA.ip, DATA.port)
		if (sock == nil) then 
			log("Unable to connect to UPS relay at : ".. DATA.ip..":"..DATA.port,3)
			return false 
		end
	    sock:send('LIST VAR '..upsName..'\n')
		local ret, _, _ = sock:receive()
		if ret == 'BEGIN LIST VAR '..upsName then
			local loadpct, nompower
			-- Read all reponse lines
			repeat
				ret, _, _ = sock:receive()
				local var, val
				if ret then 
					var, val = ret:match('VAR ups ([%w%.]+) "(.+)"') 
				else
					var = nil
				end
				if (var and val) then 
					-- Update variable
					varSet(var,val)
					-- Extra processing
					if var == "battery.charge" then 
						-- Update batery status
						varSet("BatteryLevel", val, SIDS.HA_DEV)
						varSet("BatteryDate", os.time(), SIDS.HA_DEV)
					elseif var == "ups.status" then
						-- Update status details
						local alarm, status = CheckStatus(val)
						varSet("Status", status)
						-- See if we have an alarm status
						if alarm then
							varSet("Tripped", "1", SIDS.SEC)
							varSet("LastTrip", os.time(), SIDS.SEC)
							local armed = varGet("Armed", SIDS.SEC)
							varSet("ArmedTripped", armed, SIDS.SEC)
						else
							varSet("Tripped", "0", SIDS.SEC)
							varSet("ArmedTripped", "0", SIDS.SEC)
						end
					elseif val == "ups.load" then 
						loadpct = tonumber(val)
					elseif val == "ups.realpower.nominal" then					
						nompower = tonumber(val)
					end
				end	
			until ret == nil or (ret == 'END LIST VAR '..upsName)
			res = (ret ~= nil)
			if(loadpct ~= nil and nompower ~= nil) then
				varSet("Watts", round((loadpct / 100) * nompower,2), SIDS.EM_PWR)
			end	
		end
		sock:close()
		return res
	end

	-- Poll the UPS Status report and update plugin status
    function refreshCache()
        debug("refreshCache called")
        -- Get polling period
        local period = tonumber(varGet("PollSettings", SIDS.ZW_DEV))
        if ((period ~= 0 and period &lt; 10) or period > 3600) then period = 300 end
        if (period ~=0) then luup.call_delay("refreshCache", period) end
		-- Get status details
		local stat, ups_data = UPSCapture()
		if stat then
			debug("Successful status read from " .. DATA.ip)
			varSet("LastUpdate", os.time(), SIDS.HA_DEV)
			local pc = tonumber(varGet("PollOk", SIDS.ZW_DEV)) + 1
			varSet("PollOk", pc, SIDS.ZW_DEV)
		else
			local pc = tonumber(varGet("PollNoReply", SIDS.ZW_DEV)) + 1
			varSet("PollNoReply", pc, SIDS.ZW_DEV)
			varSet("Status", "UPS read failed.")
			log("refreshCache failed",3)
		end
    end

    function startup(parentDevice)
		-- See if plugin is disabled
		local isDisabled = luup.attr_get("disabled", parentDevice)
		if ((isDisabled == 1) or (isDisabled == "1")) then
			log("Init: Plug-in - DISABLED",2)
			DATA.Disabled = true
			varSet("Status", "Plug-in disabled")
			-- Now we are done. Mark device as disabled
			return true, "Plug-in Disabled.", DATA.Description
		end
		DATA.Device = parentDevice
        -- Set defaults for varaibles.
        defVar("Version", DATA.Version)
        defVar("UPSName", 'ups')
        defVar("PollSettings", "300", SIDS.ZW_DEV)
        defVar("PollOk", "0", SIDS.ZW_DEV)
        defVar("PollNoReply", "0", SIDS.ZW_DEV)
        defVar("Status", "Waiting first poll")
		defVar("Tripped", "0", SIDS.SEC)
		defVar("Armed", "0", SIDS.SEC)
		defVar("ArmedTripped", "0", SIDS.SEC)
        -- Validate that the IP address for NAS or script server is configured in Vera.
		local ipa = luup.attr_get("ip", DATA.Device)
		if (ipa ~= "") then
			-- See if port is specified or not
			local ipaddr, port = string.match(ipa, "(.-):(.*)")
			DATA.ip = (ipaddr or ipa)
			DATA.port = (port or DATA.port)
			debug("IP = " .. DATA.ip .. ", port = " .. DATA.port)
		else	
			varSet("Status", "Configure IP Address.")
			luup.set_failure(1, DATA.Device)
			return false, "Configure IP Address.", DATA.Description
		end
        log(" #" .. tostring(DATA.Device) .. " starting up with ip " .. DATA.ip)
        defVar("Configured", "1", SIDS.HA_DEV)
        defVar("FirstConfigured", os.time(), SIDS.HA_DEV)

        -- Start polling
        luup.call_delay("refreshCache", 60)
		luup.set_failure(0, DATA.Device)
		return true
    end
  </functions>
  <incoming>
  </incoming>
  <startup>startup</startup>
  <actionList>
    <action>
      <serviceId>urn:micasaverde-com:serviceId:SecuritySensor1</serviceId>
      <name>SetArmed</name>
      <run>
        varSet("Armed", lul_settings.newArmedValue or "0", SIDS.SEC)
      </run>
    </action>
    <action>
      <serviceId>urn:micasaverde-com:serviceId:HaDevice1</serviceId>
      <name>Poll</name>
      <run>
        -- Force refreshCache to get called in a Timer
        luup.call_timer("refreshCache", 1, "1", "")
      </run>
    </action>
    </actionList>
</implementation>
